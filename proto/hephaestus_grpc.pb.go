// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/hephaestus.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HephaestusService_RegisterNode_FullMethodName            = "/hephaestus.HephaestusService/RegisterNode"
	HephaestusService_GetNodeStatus_FullMethodName           = "/hephaestus.HephaestusService/GetNodeStatus"
	HephaestusService_UpdateNodeConfiguration_FullMethodName = "/hephaestus.HephaestusService/UpdateNodeConfiguration"
	HephaestusService_DeleteNode_FullMethodName              = "/hephaestus.HephaestusService/DeleteNode"
	HephaestusService_ProcessLogEntry_FullMethodName         = "/hephaestus.HephaestusService/ProcessLogEntry"
	HephaestusService_StreamLogEntries_FullMethodName        = "/hephaestus.HephaestusService/StreamLogEntries"
	HephaestusService_GetSolutionProposal_FullMethodName     = "/hephaestus.HephaestusService/GetSolutionProposal"
	HephaestusService_ValidateSolution_FullMethodName        = "/hephaestus.HephaestusService/ValidateSolution"
)

// HephaestusServiceClient is the client API for HephaestusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HephaestusService provides the main API interface for the Hephaestus system
type HephaestusServiceClient interface {
	// Node Management
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	GetNodeStatus(ctx context.Context, in *NodeStatusRequest, opts ...grpc.CallOption) (*NodeStatusResponse, error)
	UpdateNodeConfiguration(ctx context.Context, in *UpdateNodeConfigurationRequest, opts ...grpc.CallOption) (*UpdateNodeConfigurationResponse, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	// Log Processing
	ProcessLogEntry(ctx context.Context, in *ProcessLogEntryRequest, opts ...grpc.CallOption) (*ProcessLogEntryResponse, error)
	StreamLogEntries(ctx context.Context, in *StreamLogEntriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntryData], error)
	// Solution Management
	GetSolutionProposal(ctx context.Context, in *GetSolutionProposalRequest, opts ...grpc.CallOption) (*GetSolutionProposalResponse, error)
	ValidateSolution(ctx context.Context, in *ValidateSolutionRequest, opts ...grpc.CallOption) (*ValidateSolutionResponse, error)
}

type hephaestusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHephaestusServiceClient(cc grpc.ClientConnInterface) HephaestusServiceClient {
	return &hephaestusServiceClient{cc}
}

func (c *hephaestusServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, HephaestusService_RegisterNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hephaestusServiceClient) GetNodeStatus(ctx context.Context, in *NodeStatusRequest, opts ...grpc.CallOption) (*NodeStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeStatusResponse)
	err := c.cc.Invoke(ctx, HephaestusService_GetNodeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hephaestusServiceClient) UpdateNodeConfiguration(ctx context.Context, in *UpdateNodeConfigurationRequest, opts ...grpc.CallOption) (*UpdateNodeConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNodeConfigurationResponse)
	err := c.cc.Invoke(ctx, HephaestusService_UpdateNodeConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hephaestusServiceClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, HephaestusService_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hephaestusServiceClient) ProcessLogEntry(ctx context.Context, in *ProcessLogEntryRequest, opts ...grpc.CallOption) (*ProcessLogEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessLogEntryResponse)
	err := c.cc.Invoke(ctx, HephaestusService_ProcessLogEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hephaestusServiceClient) StreamLogEntries(ctx context.Context, in *StreamLogEntriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntryData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HephaestusService_ServiceDesc.Streams[0], HephaestusService_StreamLogEntries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamLogEntriesRequest, LogEntryData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HephaestusService_StreamLogEntriesClient = grpc.ServerStreamingClient[LogEntryData]

func (c *hephaestusServiceClient) GetSolutionProposal(ctx context.Context, in *GetSolutionProposalRequest, opts ...grpc.CallOption) (*GetSolutionProposalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSolutionProposalResponse)
	err := c.cc.Invoke(ctx, HephaestusService_GetSolutionProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hephaestusServiceClient) ValidateSolution(ctx context.Context, in *ValidateSolutionRequest, opts ...grpc.CallOption) (*ValidateSolutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSolutionResponse)
	err := c.cc.Invoke(ctx, HephaestusService_ValidateSolution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HephaestusServiceServer is the server API for HephaestusService service.
// All implementations must embed UnimplementedHephaestusServiceServer
// for forward compatibility.
//
// HephaestusService provides the main API interface for the Hephaestus system
type HephaestusServiceServer interface {
	// Node Management
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	GetNodeStatus(context.Context, *NodeStatusRequest) (*NodeStatusResponse, error)
	UpdateNodeConfiguration(context.Context, *UpdateNodeConfigurationRequest) (*UpdateNodeConfigurationResponse, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	// Log Processing
	ProcessLogEntry(context.Context, *ProcessLogEntryRequest) (*ProcessLogEntryResponse, error)
	StreamLogEntries(*StreamLogEntriesRequest, grpc.ServerStreamingServer[LogEntryData]) error
	// Solution Management
	GetSolutionProposal(context.Context, *GetSolutionProposalRequest) (*GetSolutionProposalResponse, error)
	ValidateSolution(context.Context, *ValidateSolutionRequest) (*ValidateSolutionResponse, error)
	mustEmbedUnimplementedHephaestusServiceServer()
}

// UnimplementedHephaestusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHephaestusServiceServer struct{}

func (UnimplementedHephaestusServiceServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedHephaestusServiceServer) GetNodeStatus(context.Context, *NodeStatusRequest) (*NodeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStatus not implemented")
}
func (UnimplementedHephaestusServiceServer) UpdateNodeConfiguration(context.Context, *UpdateNodeConfigurationRequest) (*UpdateNodeConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeConfiguration not implemented")
}
func (UnimplementedHephaestusServiceServer) DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedHephaestusServiceServer) ProcessLogEntry(context.Context, *ProcessLogEntryRequest) (*ProcessLogEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessLogEntry not implemented")
}
func (UnimplementedHephaestusServiceServer) StreamLogEntries(*StreamLogEntriesRequest, grpc.ServerStreamingServer[LogEntryData]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogEntries not implemented")
}
func (UnimplementedHephaestusServiceServer) GetSolutionProposal(context.Context, *GetSolutionProposalRequest) (*GetSolutionProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSolutionProposal not implemented")
}
func (UnimplementedHephaestusServiceServer) ValidateSolution(context.Context, *ValidateSolutionRequest) (*ValidateSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSolution not implemented")
}
func (UnimplementedHephaestusServiceServer) mustEmbedUnimplementedHephaestusServiceServer() {}
func (UnimplementedHephaestusServiceServer) testEmbeddedByValue()                           {}

// UnsafeHephaestusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HephaestusServiceServer will
// result in compilation errors.
type UnsafeHephaestusServiceServer interface {
	mustEmbedUnimplementedHephaestusServiceServer()
}

func RegisterHephaestusServiceServer(s grpc.ServiceRegistrar, srv HephaestusServiceServer) {
	// If the following call pancis, it indicates UnimplementedHephaestusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HephaestusService_ServiceDesc, srv)
}

func _HephaestusService_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HephaestusServiceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HephaestusService_RegisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HephaestusServiceServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HephaestusService_GetNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HephaestusServiceServer).GetNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HephaestusService_GetNodeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HephaestusServiceServer).GetNodeStatus(ctx, req.(*NodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HephaestusService_UpdateNodeConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HephaestusServiceServer).UpdateNodeConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HephaestusService_UpdateNodeConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HephaestusServiceServer).UpdateNodeConfiguration(ctx, req.(*UpdateNodeConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HephaestusService_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HephaestusServiceServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HephaestusService_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HephaestusServiceServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HephaestusService_ProcessLogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessLogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HephaestusServiceServer).ProcessLogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HephaestusService_ProcessLogEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HephaestusServiceServer).ProcessLogEntry(ctx, req.(*ProcessLogEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HephaestusService_StreamLogEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HephaestusServiceServer).StreamLogEntries(m, &grpc.GenericServerStream[StreamLogEntriesRequest, LogEntryData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HephaestusService_StreamLogEntriesServer = grpc.ServerStreamingServer[LogEntryData]

func _HephaestusService_GetSolutionProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSolutionProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HephaestusServiceServer).GetSolutionProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HephaestusService_GetSolutionProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HephaestusServiceServer).GetSolutionProposal(ctx, req.(*GetSolutionProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HephaestusService_ValidateSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HephaestusServiceServer).ValidateSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HephaestusService_ValidateSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HephaestusServiceServer).ValidateSolution(ctx, req.(*ValidateSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HephaestusService_ServiceDesc is the grpc.ServiceDesc for HephaestusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HephaestusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hephaestus.HephaestusService",
	HandlerType: (*HephaestusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _HephaestusService_RegisterNode_Handler,
		},
		{
			MethodName: "GetNodeStatus",
			Handler:    _HephaestusService_GetNodeStatus_Handler,
		},
		{
			MethodName: "UpdateNodeConfiguration",
			Handler:    _HephaestusService_UpdateNodeConfiguration_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _HephaestusService_DeleteNode_Handler,
		},
		{
			MethodName: "ProcessLogEntry",
			Handler:    _HephaestusService_ProcessLogEntry_Handler,
		},
		{
			MethodName: "GetSolutionProposal",
			Handler:    _HephaestusService_GetSolutionProposal_Handler,
		},
		{
			MethodName: "ValidateSolution",
			Handler:    _HephaestusService_ValidateSolution_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogEntries",
			Handler:       _HephaestusService_StreamLogEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/hephaestus.proto",
}
