syntax = "proto3";

package hephaestus;

option go_package = "github.com/HoyeonS/hephaestus/pkg/proto";

// HephaestusService provides the main API interface for the Hephaestus system
service HephaestusService {
    // Node Management
    rpc InitializeNode(InitializeNodeRequest) returns (InitializeNodeResponse);
    rpc GetNodeStatus(NodeStatusRequest) returns (NodeStatusResponse);
    rpc UpdateNodeConfiguration(UpdateNodeConfigurationRequest) returns (UpdateNodeConfigurationResponse);
    rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse);

    // Log Processing
    rpc ProcessLogEntry(ProcessLogEntryRequest) returns (ProcessLogEntryResponse);
    rpc StreamLogEntries(StreamLogEntriesRequest) returns (stream LogEntryData);

    // Solution Management
    rpc GetSolutionProposal(SolutionProposalRequest) returns (SolutionProposalResponse);
    rpc ApplySolution(ApplySolutionRequest) returns (ApplySolutionResponse);
}

// Configuration Messages
message SystemConfiguration {
    RemoteRepositoryConfiguration remote_settings = 1;
    ModelServiceConfiguration model_settings = 2;
    LoggingConfiguration logging_settings = 3;
    string operational_mode = 4;
    RepositoryConfiguration repository_settings = 5;
}

message RemoteRepositoryConfiguration {
    string auth_token = 1;
    string repository_owner = 2;
    string repository_name = 3;
    string target_branch = 4;
}

message ModelServiceConfiguration {
    string service_provider = 1;
    string service_api_key = 2;
    string model_version = 3;
}

message LoggingConfiguration {
    string log_level = 1;
    string output_format = 2;
}

message RepositoryConfiguration {
    string repository_path = 1;
    int32 file_limit = 2;
    int64 file_size_limit = 3;
}

// Node Management Messages
message InitializeNodeRequest {
    SystemConfiguration configuration = 1;
}

message InitializeNodeResponse {
    string node_identifier = 1;
    string operational_status = 2;
    string status_message = 3;
}

message NodeStatusRequest {
    string node_identifier = 1;
}

message NodeStatusResponse {
    string node_identifier = 1;
    string operational_status = 2;
    SystemConfiguration current_configuration = 3;
    string status_message = 4;
}

message UpdateNodeConfigurationRequest {
    string node_identifier = 1;
    SystemConfiguration new_configuration = 2;
}

message UpdateNodeConfigurationResponse {
    string node_identifier = 1;
    string status_message = 2;
    bool success = 3;
}

message DeleteNodeRequest {
    string node_identifier = 1;
}

message DeleteNodeResponse {
    string status_message = 1;
    bool success = 2;
}

// Log Processing Messages
message LogEntryData {
    string node_identifier = 1;
    string log_level = 2;
    string log_message = 3;
    string log_timestamp = 4;
    map<string, string> log_metadata = 5;
    string error_trace = 6;
}

message ProcessLogEntryRequest {
    string node_identifier = 1;
    LogEntryData log_entry = 2;
}

message ProcessLogEntryResponse {
    string entry_identifier = 1;
    string status_message = 2;
    bool success = 3;
}

message StreamLogEntriesRequest {
    string node_identifier = 1;
    string log_level_filter = 2;
}

// Solution Management Messages
message SolutionProposalRequest {
    string node_identifier = 1;
    string log_entry_identifier = 2;
}

message SolutionProposalResponse {
    string solution_identifier = 1;
    string proposed_changes = 2;
    repeated string affected_files = 3;
    double confidence_score = 4;
}

message ApplySolutionRequest {
    string node_identifier = 1;
    string solution_identifier = 2;
}

message ApplySolutionResponse {
    string status_message = 1;
    bool success = 2;
    repeated string modified_files = 3;
} 